//The user will enter a "feeling" word, a synonym generator API will return associated words
// and then another  API will return a random poem that matches those words' theme/topic

document.querySelector("button").addEventListener("click", pickPoem);

// let synonyms= (synonyms returned by first API )

//look for synonyms for the input word
//search poem database for those synonyms
// return 1 poem that best matches those associated words

//Dictionary.com API Key (Thesaurus):44cfbce6-d5e5-4a36-870a-3ff1648c4af6
// URL: https://www.dictionaryapi.com/api/v3/references/thesaurus/json/umpire?key=your-api-key
//publicly available API
// Ruby on Rails format? :
//<${poemText} >/<search term>[;<search term>][..][:<search type>][/<output field>][,<output field>][..][.<format>]

//<input field>: lines: Part of a line or lines of a poem, poem count: The number of poems to return (cannot be used in combination with random) random: The number of random poems to return (cannot be used in combination with poem count)
//<search term> relates to <input field>. When <input field> is:lines: <field data> is part of a line or lines of a poem
//poemcount: <field data> is the number of poems to return
//random: <field data> is the number of random poems to return
//default (empty): match <search term> with any part of <input field> when searching
//[/<output field>][,<output field>][..] are optional. They are a comma delimited set that can be any combination of:
// ex: lines: Return only the lines of each of the matching poems
//[.<format>] is optional. It can be:

//.json: Return data in json format

// &  b/w params
// ? before query params
//key= poem, no key required (public)

//${poemText} where to insert?

//"nest" fetch methods---> synonyms----> poems - use

function pickPoem() {
  let poemText = document.querySelector("input").value;

  let url1 = `https://words.bighugelabs.com/api/2/b55761560f4941000087967798557c5b/${poemText}/json`;

  // "syn" for synonyms
  //"rel" for related terms

  fetch(url1)
    .then((res) => res.json())
    .then((data) => {
      console.log(data.noun.syn.slice(0, 5));
      //  document.querySelector('ul').innerText= (list of synonyms generated by user input)
      //loop trough the array and append them to the DOM
      // let li = document.createElement('li')

      // let li = document.createElement("li");
      let ul = document.querySelector(".synonym");

      while (ul.firstChild) {
        ul.removeChild(ul.firstChild);
      }

      // li.innerText = data.noun.syn[0]

      console.log(data.noun.syn.slice(0));

      for (let i = 0; i <= 4 && i <= data.noun.syn.length; i++) {
        let li = document.createElement("li");
        ul.appendChild(li);
        li.innerText = data.noun.syn[i];
      }

      let synonym = data.noun.syn[0];

      // document.querySelector('.test').appendChild(p)

      // document.createTextNode(data.noun.syn.slice(0,5))

      // li= data.noun.syn.slice(0,5)

      // document.createElement('li') //.slice(0)
      // document.createElement('li') //.slice(1)
      // document.createElement('li') //.slice(2)
      // document.createElement('li') //.slice(3)
      // document.createElement('li') //.slice(4)

      // ul.appendChild(li)
      // li.innerText = data.

      let url2 = `https://poetrydb.org/title/${synonym}/lines.json`;

      fetch(url2)
        //res= result ---> parse it into JSON syntax ( parse response as JSON)
        .then((res) => res.json())
        // data ---> pass the data retrieved into the function
        .then((data) => {
          console.log(`poem results:${data.length} poems`)

          if(!data.length){
            document.querySelector(".poem").innerText = `No Poem Found for ${synonym}`;

          }else{
            console.log(data[0].lines);
            document.querySelector(".poem").innerText = data[0].lines;
          }

           
          // document.querySelector(".poem").innerText = data[0].lines;
          //* //(display a poem generated from synonyms)
          //  test: console.log(data.)
        })
        .catch((err) => {
          console.log(`error ${err}`);
        });
    });
}
